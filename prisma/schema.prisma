datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Accounts {
  id       Int    @id @default(autoincrement())
  email    String @unique @db.VarChar(255)
  name     String @db.VarChar(255)
  password String @db.VarChar(255)
  role     Role   @default(USER)
}

model User {
  id            Int             @id @default(autoincrement())
  accountid     Int             @unique
  loc           String          @db.VarChar(255)
  num           BigInt          @default(1231233212)
  banned        Boolean         @default(false)
  agent         Agent?          @relation(fields: [agentId], references: [id])
  employee      Employee?       @relation(fields: [employeeId], references: [id])
  agentId       Int?
  employeeId    Int?
  RatingAgent   RatingAgent[]
  FeedAgent     FeedAgent[]
  Subscriptions Subscriptions[]
  RatingNews    RatingNews[]
  Delivery      Delivery[]
}

model Feedback {
  id      Int    @id @default(autoincrement())
  account Int
  content String @db.VarChar(255)
}

model Agent {
  accountid     Int             @unique
  id            Int             @id @default(autoincrement())
  num           BigInt          @unique
  loc           String          @default("") @db.VarChar(255)
  approved      Boolean         @default(false)
  newspapers    Newspaper[]
  User          User[]
  RatingAgent   RatingAgent[]
  FeedAgent     FeedAgent[]
  Subscriptions Subscriptions[]
}

model Newspaper {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  language      Language        @default(English)
  img           String          @default("")
  description   String          @default("") @db.VarChar(255)
  Agent         Agent?          @relation(fields: [agentId], references: [id])
  agentId       Int?
  Employee      Employee[]
  price         Int             @default(0)
  Subscriptions Subscriptions[]
  RatingNews    RatingNews[]
  Delivery      Delivery[]
}

enum Role {
  USER
  ADMIN
  AGENT
}

model Employee {
  id         Int         @id @default(autoincrement())
  email      String      @unique @db.VarChar(255)
  name       String      @db.VarChar(255)
  password   String      @db.VarChar(255)
  agentid    Int         @default(0)
  loc        String      @default("") @db.VarChar(255)
  num        BigInt      @unique
  newspapers Newspaper[]
  User       User[]
  Delivery   Delivery[]
}

enum Language {
  English
  Malayalam
}

model RatingAgent {
  id       Int     @id @default(autoincrement())
  User     User    @relation(fields: [userId], references: [id])
  userId   Int
  Agent    Agent   @relation(fields: [agentId], references: [id])
  agentId  Int
  rating   Int
  feedback String?
}

model FeedAgent {
  id      Int    @id @default(autoincrement())
  User    User   @relation(fields: [userId], references: [id])
  userId  Int
  Agent   Agent  @relation(fields: [agentId], references: [id])
  agentId Int
  content String
}

model RatingNews {
  id          Int       @id @default(autoincrement())
  User        User      @relation(fields: [userId], references: [id])
  userId      Int
  Newspaper   Newspaper @relation(fields: [newspaperId], references: [id])
  newspaperId Int
  rating      Int
  feedback    String?
}

model Delivery {
  id            Int       @id @default(autoincrement())
  deliveredDate DateTime  @db.Date
  employee      Employee  @relation(fields: [employeeId], references: [id])
  employeeId    Int
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  newspaper     Newspaper @relation(fields: [newspaperId], references: [id])
  newspaperId   Int
}

model Subscriptions {
  id          Int        @id @default(autoincrement())
  subAt       DateTime
  expireAt    DateTime
  User        User       @relation(fields: [userId], references: [id])
  userId      Int
  Agent       Agent      @relation(fields: [agentId], references: [id])
  agentId     Int
  Newspaper   Newspaper? @relation(fields: [newspaperId], references: [id])
  newspaperId Int?
}
